<?xml version="1.0" encoding="UTF-8"?>

<ExtendedSectionData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="opencms://system/modules/alkacon.mercury.extension.section_ext/schemas/section-ext.xsd">
  <ExtendedSection language="en">
    <Title><![CDATA[Parameters supported by CmsCmisRepository]]></Title>
    <Section>
      <Caption><![CDATA[project (required)]]></Caption>
      <Text name="Text0">
        <links/>
        <content><![CDATA[<p>The "working project" for the CMIS repository. If this is the Online project, the repository will only provide read access to the Online project of the VFS. For any other project, the CMIS repository will access the Offline state of the VFS, and any changes are performed inside the configured project. Note that, from the point of view of the CMIS standard, different repositories are independent objects. This means that if you are writing a client application that needs to access both offline and online contents from OpenCms through CMIS, you will need to connect to both: an Offline and an Online repository.</p>]]></content>
      </Text>
    </Section>
    <Section>
      <Caption><![CDATA[description]]></Caption>
      <Text name="Text0">
        <links/>
        <content><![CDATA[<p>Description text that may be displayed by CMIS clients for the repository.</p>]]></content>
      </Text>
    </Section>
    <Section>
      <Caption><![CDATA[index (optional)]]></Caption>
      <Text name="Text0">
        <links>
          <link name="link0" internal="true" type="A">
            <target><![CDATA[/sites/docu/opencms-documentation/more-opencms-features/solr-search-integration/]]></target>
            <uuid>3afada83-d1ca-11ec-9238-0242ac11002b</uuid>
          </link>
        </links>
        <content><![CDATA[<p>The name of the OpenCms Solr index used for querying the repository. OpenCms' standard Solr search facilities are used (see <a href="%(link0)">here</a>). If this parameter is omitted, the CMIS implementation will report the repository as "not queryable". Note that Lucene indexes will <strong>not</strong> work here.</p>]]></content>
      </Text>
    </Section>
    <Section>
      <Caption><![CDATA[rendition]]></Caption>
      <Text name="Text0">
        <links/>
        <content><![CDATA[<p>The class name of a "rendition provider class". CMIS has the concept of 'renditions', which are alternative views of the same content, e.g., thumbnails of images. The class configured here can provide such renditions. The class needs to implement the interface <code>org.opencms.cmis.I_CmsCmisRenditionProvider</code>. Note that the standard OpenCms distribution does not include an implementation for this interface.</p>]]></content>
      </Text>
    </Section>
    <Section>
      <Caption><![CDATA[property]]></Caption>
      <Text name="Text0">
        <links/>
        <content><![CDATA[<p>The class name of a "property provider" class. With this parameter, it is possible to add special properties to the CMIS view of the OpenCms VFS which do not directly correspond to any resource properties or attributes, but are instead read or written by calling methods on an instance of the provided class. You can use this to make custom code in OpenCms available through CMIS calls. The configured class needs to implement the interface <code>org.opencms.cmis.I_CmsPropertyProvider</code>. No classes implementing this interface are included in the standard OpenCms distribution.</p>]]></content>
      </Text>
    </Section>
  </ExtendedSection>
</ExtendedSectionData>
