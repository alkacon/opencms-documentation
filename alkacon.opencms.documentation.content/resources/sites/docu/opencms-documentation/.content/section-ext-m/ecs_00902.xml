<?xml version="1.0" encoding="UTF-8"?>

<ExtendedSectionData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="opencms://system/modules/alkacon.mercury.extension.section_ext/schemas/section-ext.xsd">
  <ExtendedSection language="en">
    <Title><![CDATA[Attributes of the <solrfield> element]]></Title>
    <Section>
      <Caption><![CDATA[targetfield (required)]]></Caption>
      <Text name="Text0">
        <links/>
        <content><![CDATA[<p>The attribute <code>targetfield</code> defines the name of the Solr field where the mapped content is written to. The actual resulting Solr field name has the form <code>{targetfield}_{locale}</code>. The content is written into a locale-specific text field for each locale the document is defined in. E.g.: If the content is available in the locales English (<code>en</code>) and German (<code>de</code>), the values will be mapped to the fields <code>{targetfield}_en</code> and <code>{targetfield}_de</code>.</p>]]></content>
      </Text>
    </Section>
    <Section>
      <Caption><![CDATA[locale (optional)]]></Caption>
      <Text name="Text0">
        <links/>
        <content><![CDATA[<p>If not provided, a search field is created for every locale the content is defined in. If you specify a specific locale in this parameter, the search field is created for the provided locale onlyâ€”even if the content exists in other locales as well.</p>]]></content>
      </Text>
    </Section>
    <Section>
      <Caption><![CDATA[sourcefield (optional)]]></Caption>
      <Text name="Text0">
        <links/>
        <content><![CDATA[<p>Use this option to change the type of the search field. Provide <code>*_{type suffix}</code> as value, e.g., <code>*_dt</code> for dates. The resulting Solr field name will be <code>{targetfield}_{locale}_{sourcefield}</code>. This makes it possible to use other Solr field types than the field types of <code>*_de</code>, <code>*_en</code>, <code>*_fr</code>, ..., (which would otherwise be the destination field of the mapping).</p>]]></content>
      </Text>
    </Section>
    <Section>
      <Caption><![CDATA[copyfields (optional)]]></Caption>
      <Text name="Text0">
        <links>
          <link name="link0" internal="false" type="A">
            <target><![CDATA[http://wiki.apache.org/solr/SchemaXml]]></target>
            <anchor><![CDATA[Copy_Fields]]></anchor>
          </link>
        </links>
        <content><![CDATA[<p>The attribute <code>copyfields</code> is used to duplicate the result of the mapping to other Solr fields. See also in <a href="%(link0)">the Solr wiki</a>.</p>]]></content>
      </Text>
    </Section>
    <Section>
      <Caption><![CDATA[default (optional)]]></Caption>
      <Text name="Text0">
        <links/>
        <content><![CDATA[<p>This attribute sets a default value for the field that is used where the appropriate XML content field is empty.</p>]]></content>
      </Text>
    </Section>
    <Section>
      <Caption><![CDATA[boost (optional)]]></Caption>
      <Text name="Text0">
        <links>
          <link name="link0" internal="false" type="A">
            <target><![CDATA[http://wiki.apache.org/solr/SolrRelevancyFAQ]]></target>
            <anchor><![CDATA[How_can_I_increase_the_score_for_specific_documents]]></anchor>
          </link>
        </links>
        <content><![CDATA[<p>Sets a boost to the resulting Solr field. See also in <a href="%(link0)">the Solr wiki</a>.</p>]]></content>
      </Text>
    </Section>
    <Section>
      <Caption><![CDATA[addto (optional)]]></Caption>
      <Text name="Text0">
        <links/>
        <content><![CDATA[<p>This attribute specifies to which documents (search index entries) the field should be added. By default, it is added to the document of the XML content. But you can also add it to all containerpages the content is placed on. Set <code>addto="page,element"</code> to add the field to the documents of containerpages and XML content. Choose <code>addto="page"</code> to add it only to containerpages.</p>
<p>Adding search fields to containerpages is in particular useful, if you have a facetted search over containerpages. You can build facets over fields that are filled from XML contents - as, for example done for this documentation.</p>
<div class="alert alert-info">If you add a search field to containerpages, ensure to use a multivalued field. Think about two contents on a page mapping to the same field of the containerpage's document.</div>]]></content>
      </Text>
    </Section>
  </ExtendedSection>
</ExtendedSectionData>
