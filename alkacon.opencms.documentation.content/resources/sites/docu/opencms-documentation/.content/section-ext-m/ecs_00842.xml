<?xml version="1.0" encoding="UTF-8"?>

<ExtendedSectionData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="opencms://system/modules/alkacon.mercury.extension.section_ext/schemas/section-ext.xsd">
  <ExtendedSection language="en">
    <Title><![CDATA[General concept of the spellchecker]]></Title>
    <Section>
      <Text name="Text0">
        <links/>
        <content><![CDATA[<div class="alert alert-info">TODOs: Add schematic picture to explain the process</div>]]></content>
      </Text>
    </Section>
    <Section>
      <Text name="Text0">
        <links>
          <link name="link0" internal="false" type="A">
            <target><![CDATA[http://documentation.opencms.org/javadoc/core/org/opencms/search/solr/spellchecking/CmsSolrSpellchecker.html]]></target>
          </link>
          <link name="link1" internal="false" type="A">
            <target><![CDATA[http://documentation.opencms.org/javadoc/core/org/opencms/main/OpenCmsSpellcheckHandler.html]]></target>
          </link>
          <link name="link2" internal="false" type="A">
            <target><![CDATA[http://documentation.opencms.org/javadoc/core/org/opencms/search/solr/spellchecking/CmsSolrSpellchecker.html]]></target>
          </link>
        </links>
        <content><![CDATA[<p>TinyMCE provides a spellcheck plugin. The plugin makes RPC-calls to a specific URL, sending the text from the editor field and it's language, and waits for callbacks with spelling information (misspelled words and suggestions for replacements). Hence, it sends it's information to a server-side spellchecker and waits for the spellchecking results.</p>
<p>The server-side spellchecker in OpenCms is implemented using Solr's <code>SpellCheckComponent</code>. The component is typically used to implement the "Did you mean?" feature in a search application. It takes a list of words and checks if each of them occurs in a special Solr field. If some word A does not occur there, the <code>SpellCheckComponent</code> suggests words that are present in the Solr field and spelled very similar to word A. For spellchecking in OpenCms we added an additional Solr core. It contains an index for all words from dictionaries for different languages, stored in <code>entry_{locale}</code> fields. Based on that index, for each language an <code>IndexBasedSpellchecker</code> is configured.</p>
<p>Implementing the spellcheck using Solr, the format of the Solr-response has to be adjusted to the format TinyMCE expects. Thus, some transformation is required. It is performed by the <a href="%(link0)" target="_blank" rel="noopener"><code>CmsSolrSpellchecker</code></a>, that is reachable via the <a href="%(link1)" target="_blank" rel="noopener"><code>OpenCmsSpellcheckHandler</code></a>, by default available under <code>/handleSpellcheckDictionary</code> and called when the TinyMCE sends RPC-calls for spellchecking. The&nbsp;<a href="%(link2)" target="_blank" rel="noopener"><code>CmsSolrSpellchecker</code></a> takes care of transforming request and response to the necessary format. Moreover, the handler provides some extra&nbsp;maintenance features to update, exchange or add dictionaries.</p>]]></content>
      </Text>
    </Section>
  </ExtendedSection>
</ExtendedSectionData>
