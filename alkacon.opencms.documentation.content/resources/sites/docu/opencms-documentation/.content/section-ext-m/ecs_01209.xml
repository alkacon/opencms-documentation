<?xml version="1.0" encoding="UTF-8"?>

<ExtendedSectionData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="opencms://system/modules/alkacon.mercury.extension.section_ext/schemas/section-ext.xsd">
  <ExtendedSection language="en">
    <Title><![CDATA[Responsive images]]></Title>
    <Section>
      <Text name="Text0">
        <links>
          <link name="link0" internal="true" type="A">
            <target><![CDATA[/sites/docu/opencms-documentation/template-development/jsp-development/image-handling/]]></target>
            <uuid>bc83ebc1-d1c4-11ec-9238-0242ac11002b</uuid>
          </link>
          <link name="link1" internal="false" type="A">
            <target><![CDATA[https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images]]></target>
          </link>
        </links>
        <content><![CDATA[<p>Responsive images are central to web design. The images of a website should be delivered in different sizes depending on the size of the client device. This saves bandwidth and achieves better loading times and ensures that—in the case of larger images—the central motif is always visible on small screens. For the latter, scaling alone is not sufficient, you also need an image cropping method.</p>
<p>OpenCms integrates a <a href="%(link0)">server-side image processing library</a> to scale and crop images. The image processing library is available for the content editor as well as for the template developer. The content editor uses the image library in the form of an image editing tool integrated into the gallery dialog, the template developer in the form of a JSP image bean.</p>
<p>The common approach is that content editors at first upload an image in a as good as possible quality. The resolution of the uploaded image may be even too high for web presentation. If the image is subject of the <a href="%(link1)" target="_blank" rel="noopener">art direction problem</a>, the content editor crops the image with the help of the image editing tool and in this way offers different image cutouts for differen client devices. The template developer ensures the technical optimization of image sizes.</p>
<p>The example below shows a formatter JSP that uses the server-side image processing library. The example assumes an XML content with two images available, one cropped image for small devices (&lt;800px) and one for larger devices (&gt;=800px). The first <code>&lt;source&gt;</code> element provides an image for small screens where the church is cropped. The second <code>&lt;source&gt;</code> element holds the original landsape image as shown on larger screens.</p>]]></content>
      </Text>
    </Section>
  </ExtendedSection>
</ExtendedSectionData>
