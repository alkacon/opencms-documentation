<?xml version="1.0" encoding="UTF-8"?>

<ExtendedSectionData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="opencms://system/modules/alkacon.mercury.extension.section_ext/schemas/section-ext.xsd">
  <ExtendedSection language="en">
    <Title><![CDATA[Responsive images]]></Title>
    <Section>
      <Text name="Text0">
        <links>
          <link name="link0" internal="false" type="A">
            <target><![CDATA[https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images]]></target>
          </link>
        </links>
        <content><![CDATA[<p>Responsive images are central to web design. The images of a website should be delivered in different sizes depending on the size of the client device. On the one hand, this saves bandwidth and achieves better loading times. On the other hand, responsiveness also ensures that—in the case of a larger image—the central motif is always visible on small screens—the so-called <a href="%(link0)" target="_blank" rel="noopener">art direction problem</a>. For the latter, scaling alone is not sufficient, you also need an image cropping method that cuts out the central motif while discarding parts of the background.</p>
<p>OpenCms integrates a server-side image processing library to scale and crop images. There are several approaches to the art direction problem. One can leave the cropping of the motif to the content editor. In this case, the editor has to upload an image in several sizes, respectively, with and without the cropped motif. However, this approach is costly if something changes in the design of the website. For example, if a new screen size should be supported. Therefore as an alternative, there is a built-in focus point editor integrated in the OpenCms workplace. The content editor can use this tool to mark the central motif in an image with a crosshair. The crosshair ensures that the motif stays visible when the server automatically crops the image to a size requested by a formatter. In this way, the content editor only has to upload one image in good a quality, but not several. Any later changes on the images due to changes in the website design can be automated—a great help for the content editor.</p>
<p>The example below shows a formatter JSP that uses the server-side image processing library to generate a responsive image by means of the HTML <code>&lt;picture&gt;</code> tag. The rcsmplr image shows a landscape with a church as the central motif. It is assumed that two screen sizes are to be supported, one device type is smaller than 800 pixels of width and the other more than 800px of width. The first <code>&lt;source&gt;</code> element provides an image for the smaller devices where the church is cropped. The second <code>&lt;source&gt;</code> element holds the original landsape image as shown in larger client devices.</p>]]></content>
      </Text>
    </Section>
  </ExtendedSection>
</ExtendedSectionData>
