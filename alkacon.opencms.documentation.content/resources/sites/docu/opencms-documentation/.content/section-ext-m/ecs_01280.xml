<?xml version="1.0" encoding="UTF-8"?>

<ExtendedSectionData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="opencms://system/modules/alkacon.mercury.extension.section_ext/schemas/section-ext.xsd">
  <ExtendedSection language="en">
    <Title><![CDATA[Basic formatter]]></Title>
    <Section>
      <Text name="Text0">
        <links>
          <link name="link0" internal="false" type="A">
            <target><![CDATA[https://documentation.opencms.org/javadoc/core/org/opencms/jsp/util/CmsJspContentAccessBean.html]]></target>
          </link>
          <link name="link1" internal="false" type="A">
            <target><![CDATA[https://documentation.opencms.org/javadoc/core/org/opencms/jsp/util/CmsJspContentAccessValueWrapper.html]]></target>
          </link>
        </links>
        <content><![CDATA[<p>A formatter JSP at first is a standards compliant JSP file. The JSP standard tag library (JSTL) is available by default by just defining the respective <code>&lt;%@taglib%&gt;</code> directives at the beginning. In addition to the standard tag library there is a <code>&lt;cms:*&gt;</code> tag library available.</p>
<p>A formatter JSP can be recognized by the <code>&lt;cms:formatter&gt;</code> tag. The <code>var</code> attribute in the <code>&lt;cms:formatter&gt;</code> tag binds a variable that holds an XML content as explained above in an internal JSP bean representation. With <code>content.filename</code>, for example, the bean would return the file system path where the XML content is stored, whilst <code>content.value</code> gives access to all the content's data fields.</p>
<p>Inside the <code>&lt;cms:formatter&gt;</code> tag, there must be exactly one outer HTML tag. It does not matter if the HTML tag is a <code>&lt;div&gt;</code>, like in the example, or another HTML tag, but it must be only one to be rendered correctly. It is a best practice to give the outer HTML tag a common class name—<code>class="block"</code> in the example above—for <strong>all</strong> your formatters available in a template. The reason is that, on a webpage, there is usually not only one content rendered on a page but many contents of different types, one below the other. With the common class name in the outer HTML tag, you can handle margins nicely. Normally there is a defined space <strong>between</strong> the content elements, but <strong>not at the end</strong> of the last element, for example.</p>
<p>Values can be accessed in the way defined by the JSP expression language (EL) and with a OpenCms specific path syntax. If the data field is a simple data field with one atomic value only, for example, the <code>Title</code> field and its string value, one can access the value either with the EL dot notation <code>content.value.Title</code> or with the EL bracket notation <code>content.value['Title']</code>. If the data field is a complex type with child elements, only the EL bracket notation is available and the inner child element is accessed with a OpenCms specific path expression <code>content.value['Image/path']</code>.</p>
<p>Internally, this way of data access is handled by a <a href="%(link0)" target="_blank" rel="noopener">content access bean </a>and a <a href="%(link1)" target="_blank" rel="noopener">value wrapper bean</a>. The beans offer many convenience functions for XML to HTML transformation. For example, they provide null safe access to data fields. You do not have to care whether the <code>Image</code> element exists when accessing the <code>Image/path</code> child element. Also, if you compare the output of <code>content.value.Text</code> and <code>conten.localeValue['en']['Text']</code> you will see that the beans are aware of the current user's language context, for example.</p>
<p>A fundamental task of a formatter JSP is to deal with empty or not existing data fields. In the example XML content we assume that <code>Title</code> is a required element and may not be empty, whilst <code>Text</code> may be empty but must exist, and <code>Image</code> may not exist at all. Empty data fields have sometimes the unpleasent characteristic to disturb the layout of the HTML markup, for example, by leaving unwanted empty spaces. When developing a formatter, it is thus especially important to test with contents that have empty or not existing fields. The value wrapper bean offers utility functions to deal with missing elements and empty values. Of special flexibility is the <code>isSet</code> utility function as shown in the example below. It tests for empty values, whitespace only, null, and existence for simple types in the same way as for complex types.</p>
<p>With <code>&lt;cms:formatter value="value"&gt;</code>, there is a shorthand syntax available to access content values. The short syntax replaces the constantly repeating <code>content.value.*</code> notation into <code>value.*</code> only:</p>]]></content>
      </Text>
    </Section>
  </ExtendedSection>
</ExtendedSectionData>
