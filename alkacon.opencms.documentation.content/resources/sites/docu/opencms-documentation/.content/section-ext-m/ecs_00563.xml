<?xml version="1.0" encoding="UTF-8"?>

<ExtendedSectionData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="opencms://system/modules/alkacon.mercury.extension.section_ext/schemas/section-ext.xsd">
  <ExtendedSection language="en">
    <Title><![CDATA[The structure of the XML schema for content types 2]]></Title>
    <Section>
      <Text name="Text0">
        <links>
          <link name="link0" internal="true" type="A">
            <target><![CDATA[/sites/docu/opencms-documentation/template-development/content-type-definition-with-xml-schema/defining-content-fields-by-xsd-elements/]]></target>
            <uuid>c9fda3de-d1c8-11ec-9238-0242ac11002b</uuid>
          </link>
          <link name="link1" internal="true" type="A">
            <target><![CDATA[/sites/docu/opencms-documentation/template-development/content-editor-configuration/]]></target>
            <uuid>f426f0c8-1e21-11ed-8700-0242ac11002b</uuid>
          </link>
        </links>
        <content><![CDATA[<p>The schema definition for the content type includes various <code>&lt;xsd:element&gt;</code> and <code>&lt;xsd:complexType&gt;</code> nodes to define the structure of a content. The complex type that defines the structure of the content for one language, we call the <strong>schema type</strong>. In the above example, the schema type is named "SimpleExample". The structure of the schema type, and thus of the contents, is defined in the node <code>&lt;xsd:complexType name="OpenCmsSimpleExample"&gt;</code>. In the example, the content has just one (schema) element, named <code>Title</code>.</p>
<p>The above schema definition has a second section wrapped in <code>xsd:annotation/xsd:appinfo</code>. In this optional section, content specific behavior is specified. In the example, it is configured that the content should not be indexed for searching in its own right, but it can be found in the index via the container pages in which it is placed.</p>
<p>The example highlights the basic structure of a schema definition for a content type. The whole definition is wrapped by the <code>&lt;xsd:schema&gt;</code> node. This node is always the same for each content type definition. The attributes specify the namespace of the schema definition, i.e., which nodes are available and how they can be nested.</p>
<p>Inside the <code>&lt;xsd:schema&gt;</code> node, the content type definition consists of four parts:</p>
<ol>
<li><strong><em>Inclusion of other XSDs.</em></strong> Here it is necessary to include the opencms-xmlcontent.xsd, as done in the example. This XSD exposes the definition of types that are predefined in OpenCms, e.g., <code>OpenCmsString</code> in the above example.<br />Note that the XSD is not a "real" file in the VFS. The include is handled in a special way by OpenCms.<br />You can include further XSDs here. In particular, you can nest content definitions and make the type of a nested content available via <code>&lt;xsd:include schemaLocation="opencms://root/path/to/the/contentDefintion.xsd"/&gt;</code></li>
<li><strong><em>Definition of the multi-language wrapper</em>.</strong> Content in OpenCms is by default multi-lingual. Each content item can be saved in multiple languages. All language-specific versions are stored in the same XML file. The multi-language wrapper tells us that the content exists in zero to (potentially) unlimited language-specific versions. The wrapper is mandatory and needs to have exactly the structure presented above.</li>
<li><strong><em>Definition of the structure of the content for a single language.</em></strong> This part is really specific to your content. In the example, the content has just one element of type <code>OpenCmsString</code>, i.e., an element that stores a string. Read more about the structure part <a href="%(link0)">here</a>.</li>
<li><strong><em>Configuration of the content's behavior.</em></strong> Optionally, the content item's behavior can be configured. E.g., you can configure how content elements should appear in the content editor, map content elements to properties, etc., define default values for elements, say how elements should be indexed for the search, and so on. You can read about the various configuration options <a href="%(link1)">here</a>.</li>
</ol>]]></content>
      </Text>
    </Section>
  </ExtendedSection>
</ExtendedSectionData>
