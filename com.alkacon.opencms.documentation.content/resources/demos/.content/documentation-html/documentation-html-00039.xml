<?xml version="1.0" encoding="UTF-8"?>

<DocumentationHtmls xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="opencms://system/modules/com.alkacon.opencms.documentation/schemas/documentation-html.xsd">
  <DocumentationHtml language="en">
    <Html name="Html0">
      <links/>
      <content><![CDATA[<p>The most interesting part is the <code>&lt;cms:contentload&gt;</code>-tag. It is used twice. Once, in the "outer" use, with <code>preload="true"</code> as an attribute and the attributes <code>collector</code> and <code>param</code>. The <code>collector</code> attribute specifies which collector is used and the <code>param</code> attribute configures the collector. In the example, we use the Solr-collector <code>byQuery</code> and configure it with a Solr query and (after the <code>|</code>) with the path and a name scheme that specifies where and under which name new resources are created.</p>
<p>Setting preload to true avoids loading the resources completely. The loaded information suffices to know, e.g., the number of results, as is read via <code>info.resultSize</code> from the info object exposed by <code>&lt;cms:contentinfo var="info" /&gt;</code>. If we have at least one result, we start loading the content fully by the "inner" <code>&lt;cms:contentload&gt;</code>. It takes over collector and param from the outer tag and the additional attribute <code>editable="true"</code> enables us to edit, add and delete list entries.</p>
<p>The "inner" <code>&lt;cms:contentload&gt;</code>'s body is looped through for each collected content item and via <code>&lt;cms:contentaccess&gt;</code> we get access to the current content in the same way we get access to content in a formatter. The link to <code>${content.filename}</code> by default links to the content itself. But, if a detail page for content of that type is configured, <code>&lt;cms:link&gt;</code> redirects the link to this detail page.</p>]]></content>
    </Html>
  </DocumentationHtml>
</DocumentationHtmls>
